#+TITLE: Emacs as C++ IDE
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="./static/worg.css" />
#+options: num:nil

This guide is meant as supplement to [[http://tuhdo.github.io/c-ide.html][Tudho's C/C++ Development
Enivornment for Emacs Guide]]. It assumes you:
- Use CMake to build your projects
- Have Clang/LLVM installed
- Want to setup RTags and Irony
- Want to integrate RTags and Irony with Company.

* Source code navigation using RTags
:PROPERTIES:
:ID: source-navigation
:END:
** Prerequisites
:PROPERTIES:
:ID:       b1292347-d0ed-4421-9905-33f1050883b2
:END:

- Build and install RTags using the [[https://github.com/Andersbakken/rtags#tldr-quickstart][RTags Quickstart
  Guide]]. Alternatively install RTags using your distribution's package
  manager.

- Install =rtags= from MELPA and add the following to your emacs init file:

#+begin_src emacs-lisp
(require 'rtags)
(require 'company-rtags)

(setq rtags-completions-enabled t)
(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-rtags))
(setq rtags-autostart-diagnostics t)
(rtags-enable-standard-keybindings)
#+end_src

To enable Helm integration add:
#+begin_src emacs-lisp
(setq rtags-use-helm t)
#+end_src

Before using =RTags= you need to start rdm and index your project. In
order to index your project, RTags requires you to export your
project's compile commands with cmake.

#+begin_src shell-script
  $ rdm &
  $ cd /path/to/project/root
  $ cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=1
  $ rc -J .
#+end_src

We'll see how to automate this process with cmake-ide below.

** Basic movements
:PROPERTIES:
:ID:       45f1bb42-08e5-43b9-8ea9-7b5e1124f89e
:END:
- *C-M-f* runs =forward-sexp=, move forward over a balanced
  expression that can be a pair or a symbol.

  # [[file:static/c-ide/forward-func.gif][file:static/c-ide/forward-func.gif]]

- *C-M-b* runs =backward-sexp=, move backward over a balanced
  expression that can be a pair or a symbol.

  # [[file:static/c-ide/backward-func.gif][file:static/c-ide/backward-func.gif]]

- *C-M-k* runs =kill-sexp=, kill balanced expression
  forward that can be a pair or a symbol.

  # [[file:static/c-ide/kill-func-body.gif][file:static/c-ide/kill-func-body.gif]]

- *C-M-<SPC>* or *C-M-@* runs =mark-sexp=, put mark after
  following expression that can be a pair or a symbol.

  # [[file:static/c-ide/mark-func-body.gif][file:static/c-ide/mark-func-body.gif]]

- *C-M-a* runs =beginning-of-defun=, which moves point to beginning of
  a function.

  # [[file:static/c-ide/beginning-of-defun.gif][file:static/c-ide/beginning-of-defun.gif]]

- *C-M-e* runs =end-of-defun=, which moves point to end of a
  function.

  # [[file:static/c-ide/end-of-defun.gif][file:static/c-ide/end-of-defun.gif]]

- *C-M-h* runs =mark-defun=, which put a region around whole current
  or following function.

  # [[file:static/c-ide/mark-defun.gif][file:static/c-ide/mark-defun.gif]]
# ** Find definitions in current buffer

# If you use Helm, use =moo-jump-local= from [[https://github.com/abo-abo/function-args][function-args]] package. You
# can use it as an outline tree like in other IDEs. Here is a demo:

# [[file:static/c-ide/moo-jump-local.gif][file:static/c-ide/moo-jump-local.gif]]

** Find definitions in project
:PROPERTIES:
:ID:       0331265b-7c3f-457e-ba1d-ef6c3cd24208
:END:
- *C-c-r .* runs =rtags-find-symbol-at-point=, which jumps to the
  definition of the symbol under the cursor.

** Find references in project
:PROPERTIES:
:ID:       410cfad4-a08d-4139-8c37-cb1bff5bd44e
:END:
- *C-c-r .* runs =rtags-find-references-at-point=, which lists all
  references to the symbol under the cursor.

- *C-c-r <* runs =rtags-find-references=, which prompts for the symbol
  name and finds all references.

- *C-c-r >* runs =rtags-find-symbol=, which prompts for symbol name and finds all references.

** Find files in project
:PROPERTIES:
:ID:       b6c7d5a9-2fce-4488-a7d5-3eb301b6b89a
:END:
- *C-c r ;* runs =rtags-find-file=, which prompts for file name to
  search for out of currently indexed files.

Alternatively, this can be better accomplished with [[http://tuhdo.github.io/c-ide.html#orgheadline38][Projectile]].

** View visited tags with tag stack
:PROPERTIES:
:ID:       db6bf87e-969d-42b8-ae60-b0b58f13e073
:END:
- *C-c r [* rtags-location-stack-back
  Jumps to last visited tag.

- *C-c r ]* rtags-location-stack-forward
  Moves forward in location stack.

# * Browse source tree with =Speedbar= file browser
# :PROPERTIES:
# :ID: speedbar
# :END:
# If you want a static outline tree, Emacs also has a more one:
# =Speedbar=. To use Speed bar, =M-x speedbar= and a frame that contains
# a directory tree appear. In this directory, to the left of a file or
# directory name is an icon with =+= sign in it. You can click the icon
# to open the content of a node. If the node is a file, the children of
# the files are tags (variable and function definitions) of the file; if
# the node is a directory, the children of the node are files in that
# directory. One important thing to remember, Speedbar only lists files
# that match =speedbar-file-regexp=, that contains the extensions for
# common programming languages. If you don't see files in your
# programming languages listed, consider adding it the regexp list.

# *Basic usage*:

# - Use *SPC* to open the children of a node.

# - *RET* to open the node in another window. If node is a file, open
#   that file; if node is a directory, enter that directory; if node is
#   a tag in a file, jump to the location of that tag in the file.

# - *U* to go up parent directory.

# - *n* or *p* moves to next or previous node.

# - *M-n* or *M-p* moves to next or previous node at the current level.

# - *b* switches to buffer list using Speedbar presentation. You can
#   also open children of each buffer.

# - *f* switches back to file list.

# To enable =speedbar= to show all files:

# #+begin_src emacs-lisp
#   (setq speedbar-show-unknown-files t)
# #+end_src

# ** Package: =sr-speedbar=
# :PROPERTIES:
# :ID:       1824d791-2592-4efa-90b7-845e6a68681d
# :END:

# However, you may feel that a frame is difficult to use. To solve this
# issue, you need =sr-speedbar=, which can be installed via
# MELPA.

# - To open =sr-speedbar=, execute the command =sr-speedbar-open= or
#   =sr-speedbar-toggle=.

# - To close =sr-speedbar=, execute the command =sr-speedbar-close= or
#   =sr-speedbar-toggle= again.

# Best is to use =sr-speedbar-toggle= only, for simplicity.

# =sr-speedbar= gives the following improvements:

# - Automatically switches directory tree - when you switch buffer - to
#   the =default-directory= of current buffer.
# - Use an Emacs window instead of frame, make it easier to use.
# - *C-x 1* deletes every window except Speedbar, so you won't have to
#   open again.
# - You can prevent *C-x o* to jump to =sr-speedbar= window by setting
#   =sr-speedbar-skip-other-window-p= to `t`. You can still move to
#   =sr-speedbar= window using either the mouse or [[http://www.emacswiki.org/emacs-en/WindMove][windmove]].

# _Demo_: In the demo, you can see that the function =set-cpu-active= is
# being highlighted. That's what happens when you press *RET* on a tag:
# Speedbar moves to the location of that tag and highlight it. Looking
# at the Speedbar, under =set-cpu-active= node, it contains these
# children:

# - The first child is always the return type, =void=.
# - The subsequent children are function parameters. Inside each
#   function parameter node is its type.

# [[file:static/c-ide/sr-speedbar.gif][file:static/c-ide/sr-speedbar.gif]]
* Source code completion using Irony
:PROPERTIES:
:ID: company-irony
:END:
** Prerequisites

- Install =irony-mode= from MELPA and add the following to your emacs
  init file:

#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'irony-mode)
(add-hook 'c-mode-hook 'irony-mode)
(add-hook 'objc-mode-hook 'irony-mode)

(defun my-irony-mode-hook ()
  (define-key irony-mode-map [remap completion-at-point]
    'irony-completion-at-point-async)
  (define-key irony-mode-map [remap complete-symbol]
    'irony-completion-at-point-async))

(add-hook 'irony-mode-hook 'my-irony-mode-hook)
(add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
#+end_src

*_NOTE_*: Like RTags, Irony requires a compilation database. To create
one run the following:

#+begin_src shell-script
  $ cd /path/to/project/root
  $ cmake . -DCMAKE_EXPORT_COMPILE_COMMANDS=1
#+end_src

The first time you run irony you must install the irony-server by runing
the command: =M-x irony-install-server=

** Using Company with Irony
To use =company-mode= with Irony:
- Install =company-irony= from melpa and add the following to your
  emacs init file:

#+begin_src emacs-lisp
(add-hook 'irony-mode-hook 'company-irony-setup-begin-commands)
(setq company-backends (delete 'company-semantic company-backends))
(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-irony))
#+end_src

If you want to enable tab-completion with no delay use the following:

#+begin_src emacs-lisp
(setq company-idle-delay 0)
(define-key c-mode-map [(tab)] 'company-complete)
(define-key c++-mode-map [(tab)] 'company-complete)
#+end_src

** Header file completion with =company-irony-c-headers=
:PROPERTIES:
:ID:       6e05e8a5-04a3-4279-bf99-22fd627c0e92
:END:
To add support for completing C++ headers:
- Install =company-irony-c-headers= from MELPA
- *Remove* the following to your emacs init file:

#+begin_src emacs-lisp
(eval-after-load 'company
  '(add-to-list
    'company-backends 'company-irony))
#+end_src

- *Add* the following to your emacs init file:

#+begin_src emacs-lisp
(require 'company-irony-c-headers)
(eval-after-load 'company
  '(add-to-list
    'company-backends '(company-irony-c-headers company-irony)))
#+end_src

* Syntax checking with Flycheck
** Prerequisites
- Install =flycheck= from MELPA and add the following to your emacs
  init file:

#+begin_src emacs-lisp
(add-hook 'c++-mode-hook 'flycheck-mode)
(add-hook 'c-mode-hook 'flycheck-mode)
#+end_src

** Integrating RTags with Flycheck
To enable RTags and flycheck integration add the following to your
emacs init file:

#+begin_src emacs-lisp
(require 'flycheck-rtags)

(defun my-flycheck-rtags-setup ()
  (flycheck-select-checker 'rtags)
  (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
  (setq-local flycheck-check-syntax-automatically nil))
;; c-mode-common-hook is also called by c++-mode
(add-hook 'c-mode-common-hook #'my-flycheck-rtags-setup)
#+end_src

** Integrating Irony with Flycheck
- Install =flycheck-irony= from MELPA and add the following to your
  emacs init file:

#+begin_src emacs-lisp
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-irony-setup))
#+end_src
* CMake automation with cmake-ide
**  Prerequisites
- Install =cmake-ide= from MELPA and add the following to your emacs
  init file:

#+begin_src emacs-lisp
(cmake-ide-setup)
#+end_src

** Using =cmake-ide=

To have cmake-ide automatically create a compilation commands file in
your project root create a .dir-locals.el containing the following:

#+begin_src emacs-lisp
((nil . ((cmake-ide-build-dir . "<PATH_TO_PROJECT_BUILD_DIRECTORY>"))))
#+end_src

You can now build your project using =M-x
cmake-ide-compile=. Additionally, cmake-ide will automatically update
your RTags index as well.
